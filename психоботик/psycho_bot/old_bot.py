import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    ContextTypes, ConversationHandler, filters
)
from config import BOT_TOKEN, AVAILABLE_TESTS, CHOOSING_TEST, IN_TEST, TEST_COMPLETED
from database import user_db
from tests.lusher import LusherTest
from tests.rorschach import RorschachTest
from tests.love_language import LoveLanguageTest
from tests.temperament import TemperamentTest
from tests.zodiac import ZodiacTest

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
user_tests = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–µ—Å—Ç–∞–º–∏
tests_keyboard = [
    [AVAILABLE_TESTS['lusher'], AVAILABLE_TESTS['rorschach']],
    [AVAILABLE_TESTS['love_language'], AVAILABLE_TESTS['temperament']],
    [AVAILABLE_TESTS['zodiac'], AVAILABLE_TESTS['personality']],
    ['üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '‚ùå –û—Ç–º–µ–Ω–∞']
]
reply_markup = ReplyKeyboardMarkup(tests_keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.message.from_user
    logger.info(f"User {user.first_name} started the bot")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    user_db.add_user(user.id, user.username, user.first_name)
    
    welcome_text = (
        "üß† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã "
        "–∏ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    return CHOOSING_TEST

async def choose_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞"""
    user_choice = update.message.text
    user_id = update.message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç
    test_name = None
    for key, value in AVAILABLE_TESTS.items():
        if user_choice == value:
            test_name = key
            break
    if test_name == 'love_language':
        user_tests[user_id] = LoveLanguageTest()
    elif test_name == 'temperament':
        user_tests[user_id] = TemperamentTest()
    elif test_name == 'zodiac':
        user_tests[user_id] = ZodiacTest()
    elif test_name == 'rorschach':
        user_tests[user_id] = RorschachTest()
        test = user_tests[user_id]
        question = test.get_current_question()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        if hasattr(test, 'send_question') and callable(getattr(test, 'send_question')):
            await test.send_question(update, context, question)
        else:
            await update.message.reply_text(question["text"])
        
        return IN_TEST
    # ... –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤
    
    if user_choice == 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        stats = user_db.get_user_stats(user_id)
        if stats:
            response = (
                f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                f"üë§ –ò–º—è: {stats['first_name']}\n"
                f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {stats['tests_completed']}\n"
                f"üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {stats['registration_date'][:10]}\n\n"
                f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–µ—Å—Ç—ã:\n"
            )
            for test in stats['test_history'][-3:]:
                response += f"‚Ä¢ {test['test_name']} - {test['date'][:10]}\n"
        else:
            response = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        
        await update.message.reply_text(response, reply_markup=reply_markup)
        return CHOOSING_TEST
    
    if test_name:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç
        if test_name == 'lusher':
            user_tests[user_id] = LusherTest()
        elif test_name == 'rorschach':
            user_tests[user_id] = RorschachTest()
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–æ–≤ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
            await update.message.reply_text(
                "–≠—Ç–æ—Ç —Ç–µ—Å—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üõ†Ô∏è",
                reply_markup=reply_markup
            )
            return CHOOSING_TEST
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        test = user_tests[user_id]
        question = test.get_current_question()
        
        if question:
            if question['type'] == 'color_choice':
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ü–≤–µ—Ç–∞–º–∏
                color_keys = [[color['emoji'] for color in question['options'][i:i+4]] 
                             for i in range(0, len(question['options']), 4)]
                color_markup = ReplyKeyboardMarkup(color_keys, one_time_keyboard=True, resize_keyboard=True)
                
                await update.message.reply_text(
                    question['text'],
                    reply_markup=color_markup
                )
            else:
                await update.message.reply_text(
                    question['text'],
                    reply_markup=ReplyKeyboardRemove()
                )
            
            return IN_TEST
    
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –∏–∑ –º–µ–Ω—é!",
        reply_markup=reply_markup
    )
    return CHOOSING_TEST

async def handle_test_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ç–µ—Å—Ç–µ"""
    user_id = update.message.from_user.id
    user_answer = update.message.text
    
    if user_id not in user_tests:
        await update.message.reply_text(
            "–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start",
            reply_markup=reply_markup
        )
        return CHOOSING_TEST
    
    test = user_tests[user_id]
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    current_question = test.get_current_question()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç (–ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞)
    if current_question['type'] == 'color_choice':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ (–¥–ª—è –õ—é—à–µ—Ä–∞)
        color_code = None
        for color in current_question['options']:
            if color['emoji'] == user_answer:
                color_code = color['code']
                break
        if color_code:
            test.add_answer(color_code)
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!")
            return IN_TEST
    else:
        # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–†–æ—Ä—à–∞—Ö –∏ –¥—Ä—É–≥–∏–µ)
        test.add_answer(user_answer)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
    if test.is_completed():
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = test.calculate_result()
        report = test.generate_report(results)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        user_db.add_test_result(user_id, test.test_name, results)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        await update.message.reply_text(
            report,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç
        del user_tests[user_id]
        
        return CHOOSING_TEST
    else:
        # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        next_question = test.get_current_question()
        
        # –û–°–û–ë–ï–ù–ù–û–°–¢–¨: –î–ª—è —Ç–µ—Å—Ç–∞ –†–æ—Ä—à–∞—Ö–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if hasattr(test, 'send_question') and callable(getattr(test, 'send_question')):
            # –ï—Å–ª–∏ —Ç–µ—Å—Ç –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥ send_question, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            await test.send_question(update, context, next_question)
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–æ–≤
            if next_question['type'] == 'color_choice':
                color_keys = [[color['emoji'] for color in next_question['options'][i:i+4]] 
                             for i in range(0, len(next_question['options']), 4)]
                color_markup = ReplyKeyboardMarkup(color_keys, one_time_keyboard=True, resize_keyboard=True)
                
                await update.message.reply_text(
                    next_question['text'],
                    reply_markup=color_markup
                )
            else:
                await update.message.reply_text(
                    next_question['text'],
                    reply_markup=ReplyKeyboardRemove()
                )
        
        return IN_TEST

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã"""
    user_id = update.message.from_user.id
    
    if user_id in user_tests:
        del user_tests[user_id]
    
    await update.message.reply_text(
        '–¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã',
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")
    
    if update and update.message:
        await update.message.reply_text(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üò¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ!',
            reply_markup=reply_markup
        )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING_TEST: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, choose_test)
            ],
            IN_TEST: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_test_answer)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('cancel', cancel))
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()