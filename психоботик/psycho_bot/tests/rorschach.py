import random
import os
from telegram import InputFile
from .base_test import BaseTest

class RorschachTest(BaseTest):
    def __init__(self):
        super().__init__("rorschach")
        self.images = ["blot1", "blot2", "blot3", "blot4", "blot5", "blot6", "blot7", "blot8", "blot9", "blot10"]
        self.setup_questions()
    
    def setup_questions(self):
        self.questions = []
        for i, blot in enumerate(self.images):
            self.questions.append({
                "text": f"ü¶ã –ß—Ç–æ –≤—ã –≤–∏–¥–∏—Ç–µ –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏? –û–ø–∏—à–∏—Ç–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é.",
                "type": "text_input",
                "image": f"images/rorschach/{blot}.jpg",
                "image_caption": f"–ü—è—Ç–Ω–æ –†–æ—Ä—à–∞—Ö–∞ {i+1}/10"
            })
    
    def get_image_path(self, image_name):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é"""
        # –ü—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
        return os.path.join(os.path.dirname(os.path.dirname(__file__)), image_name)
    
    async def send_question(self, update, context, question):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        image_path = self.get_image_path(question["image"])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if os.path.exists(image_path):
            try:
                with open(image_path, 'rb') as photo:
                    await context.bot.send_photo(
                        chat_id=update.effective_chat.id,
                        photo=InputFile(photo),
                        caption=question["text"]
                    )
            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                await update.message.reply_text(
                    f"{question['text']}\n\n(–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)"
                )
        else:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            await update.message.reply_text(
                f"{question['text']}\n\n‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –ø—É—Ç–∏: {image_path}"
            )
    
    def calculate_result(self):
        # –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤
        analysis = {
            "animal_count": 0,
            "human_count": 0, 
            "object_count": 0,
            "abstract_count": 0,
            "response_length": 0
        }
        
        for answer in self.answers:
            if answer:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                answer_lower = answer.lower()
                analysis["response_length"] += len(answer)
                
                if any(word in answer_lower for word in ["–∂–∏–≤–æ—Ç–Ω", "–∑–≤–µ—Ä", "–ø—Ç–∏—Ü", "–Ω–∞—Å–µ–∫–æ–º", "animal", "beast"]):
                    analysis["animal_count"] += 1
                elif any(word in answer_lower for word in ["—á–µ–ª–æ–≤–µ–∫", "–ª–∏—Ü–æ", "—Ñ–∏–≥—É—Ä–∞", "—Ç–µ–ª–æ", "person", "human", "face"]):
                    analysis["human_count"] += 1
                elif any(word in answer_lower for word in ["–ø—Ä–µ–¥–º–µ—Ç", "–≤–µ—â—å", "–æ–±—ä–µ–∫—Ç", "—Å—Ç—Ä–æ–µ–Ω–∏–µ", "object", "thing", "building"]):
                    analysis["object_count"] += 1
                else:
                    analysis["abstract_count"] += 1
        
        return analysis
    
    def generate_report(self, results):
        total_responses = len(self.answers)
        if total_responses == 0:
            return "‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
        
        animal_percent = (results["animal_count"] / total_responses) * 100
        human_percent = (results["human_count"] / total_responses) * 100
        object_percent = (results["object_count"] / total_responses) * 100
        abstract_percent = (results["abstract_count"] / total_responses) * 100
        
        avg_length = results["response_length"] / total_responses if total_responses > 0 else 0
        
        report = f"""
ü¶ã **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –†–æ—Ä—à–∞—Ö–∞**

üìù –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤: {total_responses}

**–¢–∏–ø—ã –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π:**
üê∂ –ñ–∏–≤–æ—Ç–Ω—ã–µ: {animal_percent:.1f}%
üë• –õ—é–¥–∏: {human_percent:.1f}%  
üì¶ –û–±—ä–µ–∫—Ç—ã: {object_percent:.1f}%
üé≠ –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ: {abstract_percent:.1f}%

üìä –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {avg_length:.1f} —Å–∏–º–≤–æ–ª–æ–≤

**–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:**
{self.get_interpretation(animal_percent, human_percent, object_percent, abstract_percent, avg_length)}
"""
        return report
    
    def get_interpretation(self, animal, human, object_p, abstract, avg_len):
        interpretations = []
        
        if animal > 40:
            interpretations.append("‚Ä¢ –í—ã –æ–±–ª–∞–¥–∞–µ—Ç–µ —Å–∏–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç–∏–Ω–∫—Ç–∞–º–∏ –∏ –ø—Ä–∏—Ä–æ–¥–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π.")
        elif animal < 20:
            interpretations.append("‚Ä¢ –í—ã –±–æ–ª—å—à–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, —á–µ–º –Ω–∞ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ.")
        
        if human > 30:
            interpretations.append("‚Ä¢ –í—ã —Å–æ—Ü–∏–∞–ª—å–Ω–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∫ –ª—é–¥—è–º.")
        elif human < 15:
            interpretations.append("‚Ä¢ –í—ã –±–æ–ª–µ–µ –∏–Ω—Ç—Ä–æ–≤–µ—Ä—Ç–Ω—ã –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω—ã –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –º–∏—Ä–µ.")
        
        if object_p > 25:
            interpretations.append("‚Ä¢ –í—ã –ø—Ä–∞–∫—Ç–∏—á–Ω—ã –∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π –º–∏—Ä.")
        elif object_p < 10:
            interpretations.append("‚Ä¢ –í—ã –º–µ–Ω–µ–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∏—Å—Ç–∏—á–Ω—ã –∏ –±–æ–ª—å—à–µ —Ü–µ–Ω–∏—Ç–µ –∏–¥–µ–∏.")
        
        if abstract > 35:
            interpretations.append("‚Ä¢ –í—ã –æ–±–ª–∞–¥–∞–µ—Ç–µ —Ä–∞–∑–≤–∏—Ç—ã–º –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–º –º—ã—à–ª–µ–Ω–∏–µ–º.")
        elif abstract < 20:
            interpretations.append("‚Ä¢ –í—ã –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã –≤ –º—ã—à–ª–µ–Ω–∏–∏.")
        
        if avg_len > 50:
            interpretations.append("‚Ä¢ –í—ã –ø–æ–¥—Ä–æ–±–Ω—ã –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∫ –¥–µ—Ç–∞–ª—è–º.")
        elif avg_len < 20:
            interpretations.append("‚Ä¢ –í—ã –ª–∞–∫–æ–Ω–∏—á–Ω—ã –∏ –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã –≤ –º—ã—à–ª–µ–Ω–∏–∏.")
        else:
            interpretations.append("‚Ä¢ –í—ã balanced –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏—è—Ö –º—ã—Å–ª–µ–π.")
        
        return "\n".join(interpretations)