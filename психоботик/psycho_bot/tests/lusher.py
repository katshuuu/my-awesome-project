import random
from .base_test import BaseTest

class LusherTest(BaseTest):
    def __init__(self):
        super().__init__("lusher")
        self.colors = [
            {"code": "blue", "emoji": "üîµ", "name": "–°–∏–Ω–∏–π"},
            {"code": "green", "emoji": "üü¢", "name": "–ó–µ–ª–µ–Ω—ã–π"},
            {"code": "red", "emoji": "üî¥", "name": "–ö—Ä–∞—Å–Ω—ã–π"},
            {"code": "yellow", "emoji": "üü°", "name": "–ñ–µ–ª—Ç—ã–π"},
            {"code": "purple", "emoji": "üü£", "name": "–§–∏–æ–ª–µ—Ç–æ–≤—ã–π"},
            {"code": "brown", "emoji": "üü§", "name": "–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π"},
            {"code": "black", "emoji": "‚ö´", "name": "–ß–µ—Ä–Ω—ã–π"},
            {"code": "gray", "emoji": "‚ö™", "name": "–°–µ—Ä—ã–π"}
        ]
        self.setup_questions()
    
    def setup_questions(self):
        self.questions = [
            {
                "text": "üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:",
                "type": "color_choice",
                "options": self.colors
            },
            {
                "text": "üé® –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—é —Ü–≤–µ—Ç:",
                "type": "color_choice", 
                "options": self.colors
            },
            {
                "text": "üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ—Ç–∏–π —Ü–≤–µ—Ç:",
                "type": "color_choice",
                "options": self.colors
            },
            {
                "text": "üé® –ò —á–µ—Ç–≤–µ—Ä—Ç—ã–π —Ü–≤–µ—Ç:",
                "type": "color_choice",
                "options": self.colors
            }
        ]
    
    def calculate_result(self):
        # –ê–Ω–∞–ª–∏–∑ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–æ–≤
        color_meaning = {
            "blue": {"energy": 5, "calmness": 8, "creativity": 6},
            "green": {"energy": 6, "calmness": 7, "creativity": 5},
            "red": {"energy": 9, "calmness": 3, "creativity": 7},
            "yellow": {"energy": 7, "calmness": 4, "creativity": 8},
            "purple": {"energy": 4, "calmness": 6, "creativity": 9},
            "brown": {"energy": 3, "calmness": 7, "creativity": 4},
            "black": {"energy": 2, "calmness": 5, "creativity": 3},
            "gray": {"energy": 4, "calmness": 6, "creativity": 5}
        }
        
        scores = {"energy": 0, "calmness": 0, "creativity": 0}
        
        for i, color_code in enumerate(self.answers):
            weight = 4 - i  # –ë–æ–ª—å—à–∏–π –≤–µ—Å –¥–ª—è –ø–µ—Ä–≤—ã—Ö –≤—ã–±–æ—Ä–æ–≤
            color_data = color_meaning.get(color_code, {})
            for key in scores:
                scores[key] += color_data.get(key, 0) * weight
        
        return scores
    
    def generate_report(self, results):
        energy = results["energy"]
        calmness = results["calmness"] 
        creativity = results["creativity"]
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        if energy > calmness and energy > creativity:
            personality = "–≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π –∏ –∞–∫—Ç–∏–≤–Ω—ã–π"
        elif calmness > energy and calmness > creativity:
            personality = "–°–ø–æ–∫–æ–π–Ω—ã–π –∏ —É—Ä–∞–≤–Ω–æ–≤–µ—à–µ–Ω–Ω—ã–π"
        else:
            personality = "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π"
        
        report = f"""
üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –õ—é—à–µ—Ä–∞**

üé® –í–∞—à –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–æ–≤: {', '.join([self.get_color_name(color) for color in self.answers])}

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**
‚ö° –≠–Ω–µ—Ä–≥–∏—á–Ω–æ—Å—Ç—å: {energy}/40
üòå –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ: {calmness}/40  
üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: {creativity}/40

**–í–∞—à –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç:**
{personality}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
{self.get_recommendations(energy, calmness, creativity)}
"""
        return report
    
    def get_color_name(self, color_code):
        for color in self.colors:
            if color["code"] == color_code:
                return color["emoji"]
        return ""
    
    def get_recommendations(self, energy, calmness, creativity):
        if energy > 25:
            return "–í–∞–º –ø–æ–ª–µ–∑–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Å–ø–æ—Ä—Ç –∏ –¥–∏–Ω–∞–º–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞."
        elif calmness > 25:
            return "–†–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—Å—è –º–µ–¥–∏—Ç–∞—Ü–∏—è, –π–æ–≥–∞ –∏ —Å–ø–æ–∫–æ–π–Ω—ã–µ —Ö–æ–±–±–∏."
        else:
            return "–†–∞–∑–≤–∏–≤–∞–π—Ç–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ –∏—Å–∫—É—Å—Å—Ç–≤–æ, –º—É–∑—ã–∫—É –∏–ª–∏ –ø–∏—Å–∞—Ç–µ–ª—å—Å—Ç–≤–æ."